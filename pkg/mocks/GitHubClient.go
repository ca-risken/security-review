// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/v44/github"
	mock "github.com/stretchr/testify/mock"
)

// GitHubClient is an autogenerated mock type for the GitHubClient type
type GitHubClient struct {
	mock.Mock
}

// CreateIssueComment provides a mock function with given fields: ctx, owner, repoName, prNumber, comment
func (_m *GitHubClient) CreateIssueComment(ctx context.Context, owner string, repoName string, prNumber int, comment *github.IssueComment) error {
	ret := _m.Called(ctx, owner, repoName, prNumber, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, *github.IssueComment) error); ok {
		r0 = rf(ctx, owner, repoName, prNumber, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePRComment provides a mock function with given fields: ctx, owner, repoName, prNumber, comment
func (_m *GitHubClient) CreatePRComment(ctx context.Context, owner string, repoName string, prNumber int, comment *github.PullRequestComment) error {
	ret := _m.Called(ctx, owner, repoName, prNumber, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, *github.PullRequestComment) error); ok {
		r0 = rf(ctx, owner, repoName, prNumber, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllIssueComments provides a mock function with given fields: ctx, owner, repo, issueNumber
func (_m *GitHubClient) GetAllIssueComments(ctx context.Context, owner string, repo string, issueNumber int) ([]*github.IssueComment, error) {
	ret := _m.Called(ctx, owner, repo, issueNumber)

	var r0 []*github.IssueComment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) ([]*github.IssueComment, error)); ok {
		return rf(ctx, owner, repo, issueNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) []*github.IssueComment); ok {
		r0 = rf(ctx, owner, repo, issueNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.IssueComment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, owner, repo, issueNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPRComments provides a mock function with given fields: ctx, owner, repo, prNumber
func (_m *GitHubClient) GetAllPRComments(ctx context.Context, owner string, repo string, prNumber int) ([]*github.PullRequestComment, error) {
	ret := _m.Called(ctx, owner, repo, prNumber)

	var r0 []*github.PullRequestComment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) ([]*github.PullRequestComment, error)); ok {
		return rf(ctx, owner, repo, prNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) []*github.PullRequestComment); ok {
		r0 = rf(ctx, owner, repo, prNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.PullRequestComment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, owner, repo, prNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFiles provides a mock function with given fields: ctx, owner, repo, number, opts
func (_m *GitHubClient) ListFiles(ctx context.Context, owner string, repo string, number int, opts *github.ListOptions) ([]*github.CommitFile, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, number, opts)

	var r0 []*github.CommitFile
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, *github.ListOptions) ([]*github.CommitFile, *github.Response, error)); ok {
		return rf(ctx, owner, repo, number, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, *github.ListOptions) []*github.CommitFile); ok {
		r0 = rf(ctx, owner, repo, number, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.CommitFile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, *github.ListOptions) *github.Response); ok {
		r1 = rf(ctx, owner, repo, number, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, int, *github.ListOptions) error); ok {
		r2 = rf(ctx, owner, repo, number, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewGitHubClient creates a new instance of GitHubClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitHubClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitHubClient {
	mock := &GitHubClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
