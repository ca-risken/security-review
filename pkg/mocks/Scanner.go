// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/v44/github"
	mock "github.com/stretchr/testify/mock"

	scanner "github.com/ca-risken/security-review/pkg/scanner"
)

// Scanner is an autogenerated mock type for the Scanner type
type Scanner struct {
	mock.Mock
}

// Scan provides a mock function with given fields: ctx, repo, sourceCodePath, changeFiles
func (_m *Scanner) Scan(ctx context.Context, repo *github.Repository, sourceCodePath string, changeFiles []*github.CommitFile) ([]*scanner.ScanResult, error) {
	ret := _m.Called(ctx, repo, sourceCodePath, changeFiles)

	var r0 []*scanner.ScanResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *github.Repository, string, []*github.CommitFile) ([]*scanner.ScanResult, error)); ok {
		return rf(ctx, repo, sourceCodePath, changeFiles)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *github.Repository, string, []*github.CommitFile) []*scanner.ScanResult); ok {
		r0 = rf(ctx, repo, sourceCodePath, changeFiles)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*scanner.ScanResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *github.Repository, string, []*github.CommitFile) error); ok {
		r1 = rf(ctx, repo, sourceCodePath, changeFiles)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewScanner creates a new instance of Scanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScanner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scanner {
	mock := &Scanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
