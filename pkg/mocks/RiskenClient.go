// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	finding "github.com/ca-risken/core/proto/finding"
	mock "github.com/stretchr/testify/mock"

	risken "github.com/ca-risken/go-risken"
)

// RiskenClient is an autogenerated mock type for the RiskenClient type
type RiskenClient struct {
	mock.Mock
}

// PutFinding provides a mock function with given fields: ctx, req
func (_m *RiskenClient) PutFinding(ctx context.Context, req *finding.PutFindingRequest) (*finding.PutFindingResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *finding.PutFindingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finding.PutFindingRequest) (*finding.PutFindingResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finding.PutFindingRequest) *finding.PutFindingResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.PutFindingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finding.PutFindingRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRecommend provides a mock function with given fields: ctx, req
func (_m *RiskenClient) PutRecommend(ctx context.Context, req *finding.PutRecommendRequest) (*finding.PutRecommendResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *finding.PutRecommendResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finding.PutRecommendRequest) (*finding.PutRecommendResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finding.PutRecommendRequest) *finding.PutRecommendResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.PutRecommendResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finding.PutRecommendRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signin provides a mock function with given fields: ctx
func (_m *RiskenClient) Signin(ctx context.Context) (*risken.SigninResponse, error) {
	ret := _m.Called(ctx)

	var r0 *risken.SigninResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*risken.SigninResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *risken.SigninResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*risken.SigninResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRiskenClient creates a new instance of RiskenClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRiskenClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RiskenClient {
	mock := &RiskenClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
